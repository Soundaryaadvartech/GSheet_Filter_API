import pandas as pd
group_by_dic_prathisham = {
    "Item_Id": "min",
    "Item_Name": "nunique",
    "Item_Type": "nunique",
    "Item_Code": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Sale_Price": "mean",
    "Sale_Discount": lambda x: (x != 0).sum(),
    "Current_Stock": "sum",
    "Is_Public": "count",
    "Category": "nunique",
    "Colour": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Fabric": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Fit": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Lining": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Neck": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Occasion": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Size": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Sleeve": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "batch": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "bottom_length": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "bottom_print": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "bottom_type": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "collections": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "details": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "launch_date": lambda x: pd.to_datetime(x.min()).normalize(),
    "pocket": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "top_length": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "waistband": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Pack": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Days_Since_Launch": "mean",
    "Total_Quantity": "sum",
    "Total_Value": "sum",
    "Total_Item_Viewed": "sum",
    "Total_Item_Atc": "sum",
    "Per_Day_Value": "mean",
    "Per_Day_Quantity": "mean",
    "Per_Day_View": "mean",
    "Per_Day_atc": "mean",
    "Days_Until_Stockout": "mean",
    "Conversion_Percentage": "mean"
}
group_by_bee = {
    "Item_Id": "min",
    "Item_Name": "nunique",
    "Item_Type": "nunique",
    "Item_Code": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Sale_Price": "mean",
    "Sale_Discount": lambda x: (x != 0).sum(),
    "Current_Stock": "sum",
    "Is_Public": "count",
    "Age": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Bottom": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Bundles": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Filling": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Gender": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Pack_Size": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Pattern": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Product_Type": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Sale": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Size": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Sleeve": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Style": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Top": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Weave_Type": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Weight": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Width": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "batch": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "brand_name": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "launch_date":lambda x: pd.to_datetime(x.min()).normalize(),
    "quadrant": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "season": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "print_size": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Style_1": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Style_2": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Colour_1": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Colour_2": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Theme_1": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Theme_2": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Colour_1": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Colour_2": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Key_Motif_1": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print_Key_Motif_2": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Days_Since_Launch": "mean",
    "Total_Quantity": "sum",
    "Total_Value": "sum",
    "Total_Item_Viewed": "sum",
    "Total_Item_Atc": "sum",
    "Per_Day_Value": "mean",
    "Per_Day_Quantity": "mean",
    "Per_Day_View": "mean",
    "Per_Day_atc": "mean",
    "Days_Until_Stockout": "mean",
    "Conversion_Percentage": "mean"
}
group_by_dic_zing = {
    "Item_Id": "min",
    "Item_Name": "nunique",
    "Item_Type": "nunique",
    "Item_Code": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Sale_Price": "mean",
    "Sale_Discount": lambda x: (x != 0).sum(),
    "Current_Stock": "sum",
    "Is_Public": "count",
    "Category": "nunique",
    "Colour": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Fabric": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Fit": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Neck": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Occasion": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Print": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Size": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Sleeve": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "batch": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "details": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "office_wear_collection": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "print_type": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "quadrant": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "launch_date":lambda x: pd.to_datetime(x.min()).normalize(),
    "style_type": lambda x: ', '.join(sorted(set(str(item) for item in x if item is not None))),
    "Days_Since_Launch": "mean",
    "Total_Quantity": "sum",
    "Total_Value": "sum",
    "Total_Item_Viewed": "sum",
    "Total_Item_Atc": "sum",
    "Per_Day_Value": "mean",
    "Per_Day_Quantity": "mean",
    "Per_Day_View": "mean",
    "Per_Day_atc": "mean",
    "Days_Until_Stockout": "mean",
    "Conversion_Percentage": "mean"
}
